terraform {
  required_version = "{{terraform.terraform_13_version}}"

  backend "s3" {
    bucket         = "{{terraform.state_file_bucket}}"
    key            = "terraform/dataworks/dataworks-aws-bgdc-interface.tfstate"
    region         = "{{terraform.state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{terraform.state_file_region}}:{{terraform.state_file_account}}:key/{{terraform.state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

provider "aws" {
version = "~> 3.42.0"
  region  = "{{terraform.provider_region}}"

  assume_role {
    role_arn = "arn:aws:iam::${lookup(local.account, local.environment)}:role/${var.assume_role}"
  }
}

provider "aws" {
  alias = "crypto"
version = "~> 3.42.0"
  region  = "{{terraform.provider_region}}"

  assume_role {
    role_arn = "arn:aws:iam::${local.account[local.management_account[local.environment]]}:role/${var.assume_role}"
  }
}

provider "aws" {
  alias = "management_mgmt"
version = "~> 3.42.0"
  region  = "{{terraform.provider_region}}"

  assume_role {
    role_arn = "arn:aws:iam::${local.account.management}:role/${var.assume_role}"
  }
}

// Get AWS Account ID for credentials in use
data "aws_caller_identity" "current" {}
data "aws_region" "current" {}
data "aws_availability_zones" "available" {}

locals {
  name        = "dataworks-aws-bgdc-interface"
  environment = terraform.workspace == "default" ? "development" : terraform.workspace

  account = {
    {%- for key, value in accounts.items() %}
      {{key}} = "{{value}}"
    {%- endfor %}
  }

  bgdc_account = {
    {%- for key, value in bgdc_accounts.items() %}
      {{key}} = "{{value}}"
    {%- endfor %}
  }

  common_tags = {
    {%- for key, value in common_tags_bgdc.items() %}
      {{key}} = "{{value}}"
    {%- endfor %}
    Environment  = local.environment
    Application  = local.name
    Team         = "DataWorks"
  }

  cidr_block = {
  {%- for environment, ranges in cidr_block.items() %}
      {{ environment }} = {
        {%- for key, value in ranges.items() %}
          {{ key }} = "{{ value }}"{% endfor %}
      } {%- endfor %}
  }

  bgdc_vpc_peering = {
    {%- for environment, params in bgdc_vpc_peering.items() %}
    {{ environment }} = {
      {%- for key, value in params.items() %}
        {%- if key == 'subnet_cidr_blocks' %}
        subnet_cidr_blocks = [ {%- for item in value %} "{{ item }}", {%- endfor %} ]
        {%- else %}
        {{ key }} = "{{ value }}"
        {%- endif %}
      {%- endfor %}
    }
    {%- endfor %}
  }

  bgdc_dwx_listener = {
    {%- for environment, port in bgdc_dwx_listener.items() %}
    {{ environment }} = {{ port }} 
    {%- endfor %}
  }

  bgdc_dwx_nginx_target = {
    {%- for environment, port in bgdc_dwx_nginx_target.items() %}
    {{ environment }} = {{ port }} 
    {%- endfor %}
  }

}

data "terraform_remote_state" "crypto" {
  backend   = "s3"
  workspace = local.crypto_workspace[local.management_account[local.environment]]

  config = {
    bucket         = "{{terraform.state_file_bucket}}"
    key            = "terraform/dataworks/aws-crypto.tfstate"
    region         = "{{terraform.state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{terraform.state_file_region}}:{{terraform.state_file_account}}:key/{{terraform.state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "internal_compute" {
  backend   = "s3"
  workspace = terraform.workspace

  config = {
    bucket         = "{{terraform.state_file_bucket}}"
    key            = "terraform/dataworks/aws-internal-compute.tfstate"
    region         = "{{terraform.state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "ingest" {
  backend   = "s3"
  workspace = terraform.workspace

  config = {
    bucket         = "{{terraform.state_file_bucket}}"
    key            = "terraform/dataworks/aws-ingestion.tfstate"
    region         = "{{terraform.state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "management_mgmt" {
  backend   = "s3"
  workspace = "management"

  config = {
    bucket         = "{{terraform.state_file_bucket}}"
    key            = "terraform/dataworks/management.tfstate"
    region         = "{{terraform.state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "common" {
  backend   = "s3"
  workspace = terraform.workspace

  config = {
    bucket         = "{{terraform.state_file_bucket}}"
    key            = "terraform/dataworks/common.tfstate"
    region         = "{{terraform.state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "security-tools" {
  backend   = "s3"
  workspace = terraform.workspace

  config = {
    bucket         = "{{terraform.state_file_bucket}}"
    key            = "terraform/dataworks/aws-security-tools.tfstate"
    region         = "{{terraform.state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "adg" {
  backend   = "s3"
  workspace = terraform.workspace

  config = {
    bucket         = "{{terraform.state_file_bucket}}"
    key            = "terraform/dataworks/aws-analytical-dataset-generation.tfstate"
    region         = "{{terraform.state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "aws_certificate_authority" {
  backend = "s3"
  workspace = terraform.workspace
  config = {
    bucket         = "{{terraform.state_file_bucket}}"
    key            = "terraform/dataworks/aws-certificate-authority.tfstate"
    region         = "{{terraform.state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "mgmt_ca" {
  backend   = "s3"
  workspace = local.management_account[local.environment]

  config = {
    bucket         = "{{terraform.state_file_bucket}}"
    key            = "terraform/dataworks/aws-certificate-authority.tfstate"
    region         = "{{terraform.state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{state_file_region}}:{{state_file_account}}:key/{{state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}

data "terraform_remote_state" "internet_egress" {
  backend   = "s3"
  workspace = local.management_workspace[local.management_account[local.environment]]

  config = {
    bucket         = "{{terraform.state_file_bucket}}"
    key            = "terraform/dataworks/aws-internet-egress.tfstate"
    region         = "{{terraform.state_file_region}}"
    encrypt        = true
    kms_key_id     = "arn:aws:kms:{{terraform.state_file_region}}:{{terraform.state_file_account}}:key/{{terraform.state_file_kms_key}}"
    dynamodb_table = "remote_state_locks"
  }
}
