meta:
  plan:
    terraform-common-config:
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        params:
          TF_INPUT: false
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_VAR_costcode: ((dataworks.costcode))

    terraform-bootstrap:
      task: terraform-bootstrap
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            version: 0.0.19
            tag: 0.0.19
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              cp terraform.tf ../terraform-bootstrap
          dir: dataworks-aws-bgdc-interface
        inputs:
          - name: dataworks-aws-bgdc-interface
        outputs:
          - name: terraform-bootstrap
      params:
        AWS_REGION: eu-west-2

    terraform-apply:
      task: terraform-apply
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              export TF_VAR_emr_ami_id=$(cat ../emr-ami/id)
              export TF_VAR_emr_launcher_zip="{base_path = \"../emr-launcher-release\", version = \"$(cat ../emr-launcher-release/version)\"}"
              cp ../terraform-bootstrap/terraform.tf .
              terraform workspace show
              terraform init
              terraform plan -out terraform.plan
              terraform apply -auto-approve terraform.plan
          dir: dataworks-aws-bgdc-interface
        inputs:
          - name: dataworks-aws-bgdc-interface
          - name: terraform-bootstrap
          - name: emr-ami
          - name: emr-launcher-release

    terraform-plan:
      task: terraform-plan
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              export TF_VAR_emr_ami_id=$(cat ../emr-ami/id)
              export TF_VAR_emr_launcher_zip="{base_path = \"../emr-launcher-release\", version = \"$(cat ../emr-launcher-release/version)\"}"
              cp ../terraform-bootstrap/terraform.tf .
              terraform workspace show
              terraform init
              terraform plan $DETAILED_EXITCODE
          dir: dataworks-aws-bgdc-interface
        inputs:
          - name: dataworks-aws-bgdc-interface
          - name: terraform-bootstrap
          - name: emr-ami
          - name: emr-launcher-release
      params:
        DETAILED_EXITCODE: -detailed-exitcode

    terraform-output-management:
      task: terraform-output-management
      .: (( inject meta.plan.terraform-common-config ))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            version: ((dataworks.terraform_version))
            tag: ((dataworks.terraform_version))
        params:
          TF_WORKSPACE: management
        run:
          path: sh
          dir: aws-management-infrastructure
          args:
            - -exc
            - |
              terraform init
              terraform workspace show
              terraform output --json > ../terraform-output-management/outputs.json
        inputs:
          - name: aws-management-infrastructure
        outputs:
          - name: terraform-output-management

    start-cluster:
      task: start-cluster
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.development)):role/ci
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              set +x
              ID=$(aws emr list-clusters --active | jq .[] | jq '.[] | select(.Name=="bgdc-interface")' | jq .Id)
              if [[ ! -z "$ID" ]] ; then
                echo "Error: one or more clusters already running"
                exit 1
              else
                aws lambda invoke --function-name bgdc_emr_launcher --invocation-type RequestResponse --cli-connect-timeout 600 --cli-read-timeout 600 output.json
                cat output.json | jq -eC "if .errorMessage? then error(.errorMessage) else true end"
              fi

    stop-cluster:
      task: stop-cluster
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.development)):role/ci
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              set +x
              ID=$(aws emr list-clusters --active | jq .[] | jq '.[] | select(.Name=="bgdc-interface")' | jq .Id)
              ID_COUNT=$(echo "$ID" | wc -l | sed s/" "//g)
              if [[ -z "$ID" ]] ; then
                echo "Error: no clusters running"
                exit 1
              elif [[ $ID_COUNT != 1 ]]; then
                echo "Error: more than 1 cluster identified"
                exit 1
              else
                echo "Terminating cluster $ID"
              aws emr terminate-clusters --cluster-ids $(echo $ID | sed s/'"'//g)
              fi

    mirror-artefact:
      task: mirror-artefact
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        inputs:
          - name: terraform-output-management
          - name: artefact-release
        params:
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              set +x
              export BUCKET=`cat terraform-output-management/outputs.json | jq -r ".artefact_bucket.value.id"`
              aws s3 cp artefact-release/ghostunnel* s3://${BUCKET}/${ARTEFACT_DIR}/
